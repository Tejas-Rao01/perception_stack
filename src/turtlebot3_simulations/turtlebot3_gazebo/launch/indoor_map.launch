<launch>

  <!-- Spawn Robot -->
  <!-- <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="x_pos" default="0.0"/>
  <arg name="y_pos" default="0.0"/>
  <arg name="z_pos" default="0.0"/> -->

  <!-- Load the world -->
  <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include> -->

 
  
  <!-- <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)"/>
  </include> -->
  


 <!-- Nodelet manager for this pipeline -->
  <node pkg="nodelet" type="nodelet" args="manager" name="standalone_nodelet" output="screen"/>

  <!-- Convert to point cloud -->
  <node pkg="nodelet" type="nodelet" name="depth_image_proc" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet --no-bond">
   
        <!--remap from your specific sensors-->         

        <!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
        <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
        <remap from="depth/camera_info" to="/camera/rgb/camera_info"/>

        <!-- Input: Rectified color image. (sensor_msgs/Image) -->
        <remap from="rgb/image_rect_color" to="/camera/rgb/image_rect_color"/>

        <!-- Input: Rectified depth image, registered to the RGB camera. (sensor_msgs/Image) -->
        <remap from="depth_registered/image_rect" to="/camera/depth_registered/image_raw"/>

        <!-- Output: XYZ point cloud. If using PCL, subscribe as PointCloud<PointXYZ>.  (sensor_msgs/PointCloud2)  -->
        <remap from="depth_registered/points" to="/point_cloud/points"/>

    </node>
    
    <!-- data source to integrate (PointCloud2) -->
     <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="0.05" />
    
    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="odom" />
    
    <!-- maximum range to integrate (speedup!) -->
    <param name="sensor_model/max_range" value="5.0" />
    <remap from="cloud_in" to="/point_cloud/points" />
  </node> 
  <rosparam command="load" file="$(find grid_map_demos)/config/octomap_to_gridmap_demo.yaml" />

  <!-- Load the octomap -->
  <!-- <node pkg="octomap_server" type="octomap_server_static" name="octomap_server" args="$(find grid_map_demos)/data/freiburg1_360.bt" output="screen"/> -->

  <!-- Launch the octomap conversion node -->
  <node pkg="grid_map_demos" type="octomap_to_gridmap_demo" name="octomap_to_gridmap_demo" output="screen" />

  <!-- Launch the grid map visualizer -->
  <node pkg="grid_map_visualization" type="grid_map_visualization" name="grid_map_visualization" output="screen" />

  <!-- Launch RViz with the demo configuration -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find grid_map_demos)/rviz/octomap_to_gridmap_demo.rviz" /> -->
  <!-- Launch Rviz-->
  <node name="rviz" pkg="rviz" type="rviz" />

</launch>
